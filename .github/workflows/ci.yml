name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # 🧪 Frontend Testing & Build
  frontend:
    name: 🎨 Frontend CI
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Lint Code
        working-directory: ./frontend
        run: npm run lint

      - name: 🧪 Run Tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

      - name: 🏗️ Build Application
        working-directory: ./frontend
        run: npm run build

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

  # 🐍 Backend Testing & Build  
  backend:
    name: 🔧 Backend CI
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📥 Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: 🔍 Lint Code
        working-directory: ./backend
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: 🧪 Run Tests
        working-directory: ./backend
        run: python -m pytest -s --tb=short

      - name: 📊 Upload Coverage  
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  # 🔐 Security Scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 📱 Installer Build (Windows)
  installer-windows:
    name: 🪟 Windows Installer
    runs-on: windows-latest
    needs: [frontend, backend]
    if: github.event_name == 'release'
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: installer/package-lock.json

      - name: 📥 Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: installer/assets/frontend/

      - name: 📥 Install Installer Dependencies
        working-directory: ./installer
        run: npm ci

      - name: 🏗️ Build Installer
        working-directory: ./installer
        env:
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: npm run build:windows

      - name: 📤 Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: novasignal-windows-installer
          path: installer/dist/*.exe
          retention-days: 90

  # 🍎 Installer Build (macOS)
  installer-macos:
    name: 🍎 macOS Installer
    runs-on: macos-latest
    needs: [frontend, backend]
    if: github.event_name == 'release'
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: installer/package-lock.json

      - name: 📥 Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: installer/assets/frontend/

      - name: 📥 Install Installer Dependencies
        working-directory: ./installer
        run: npm ci

      - name: 🏗️ Build Installer
        working-directory: ./installer
        env:
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: npm run build:macos

      - name: 📤 Upload macOS Installer
        uses: actions/upload-artifact@v4
        with:
          name: novasignal-macos-installer
          path: installer/dist/*.dmg
          retention-days: 90

  # 🐧 Installer Build (Linux)
  installer-linux:
    name: 🐧 Linux Installer
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'release'
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: installer/package-lock.json

      - name: 📥 Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: installer/assets/frontend/

      - name: 📥 Install Installer Dependencies
        working-directory: ./installer
        run: npm ci

      - name: 🏗️ Build Installer
        working-directory: ./installer
        run: npm run build:linux

      - name: 📤 Upload Linux Installer
        uses: actions/upload-artifact@v4
        with:
          name: novasignal-linux-installer
          path: installer/dist/*.{deb,rpm,AppImage}
          retention-days: 90

  # 🚀 Create GitHub Release
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [installer-windows, installer-macos, installer-linux]
    if: github.event_name == 'release'
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download All Installers
        uses: actions/download-artifact@v4
        with:
          path: ./installers/

      - name: 📋 Generate Release Notes
        id: release-notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog
          echo "## 🚀 NovaSignal $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📥 Downloads" >> RELEASE_NOTES.md
          echo "- **Windows**: \`NovaSignal-Setup-$VERSION.exe\`" >> RELEASE_NOTES.md
          echo "- **macOS**: \`NovaSignal-$VERSION.dmg\`" >> RELEASE_NOTES.md
          echo "- **Linux**: \`NovaSignal-$VERSION.AppImage\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 🔐 Verification" >> RELEASE_NOTES.md
          echo "All installers are code-signed and verified. SHA256 checksums:" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Calculate checksums
          cd installers
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read file; do
            sha256sum "$file" >> ../RELEASE_NOTES.md
          done

      - name: 🚀 Update Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installers/**/*.exe
            installers/**/*.dmg
            installers/**/*.AppImage
            installers/**/*.deb
            installers/**/*.rpm
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && github.event_name == 'release'
    
    steps:
      - name: 🗑️ Delete Temporary Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            frontend-build
            novasignal-windows-installer
            novasignal-macos-installer
            novasignal-linux-installer
          failOnError: false

  # 📊 Notify Success
  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🎉 Success Notification
        run: |
          echo "🎉 All CI/CD checks passed successfully!"
          echo "✅ Frontend tests and build completed"
          echo "✅ Backend tests and validation completed"  
          echo "✅ Security scanning completed"
          echo ""
          echo "🚀 Ready for deployment!"