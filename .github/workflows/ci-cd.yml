name: NovaSignal CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # Code Quality and Testing
  # ============================================================================
  
  lint-and-test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      # Frontend Testing
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: frontend
        run: |
          npm run lint:check || echo "::warning::Frontend linting issues found"
          npm run format:check || echo "::warning::Frontend formatting issues found"

      - name: Run frontend type checking
        working-directory: frontend
        run: npm run type-check || echo "::warning::TypeScript errors found"

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:coverage
        env:
          CI: true

      - name: Frontend build test
        working-directory: frontend
        run: npm run build

      # Backend Testing
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend linting
        working-directory: backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run backend type checking
        working-directory: backend
        run: mypy . --ignore-missing-imports || echo "::warning::Type checking issues found"

      - name: Run backend tests
        working-directory: backend
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: .

      # Upload Coverage Reports
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ============================================================================
  # Security Scanning
  # ============================================================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run npm audit
        working-directory: frontend
        run: |
          npm audit --audit-level high || echo "::warning::npm security vulnerabilities found"

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ============================================================================
  # Build Docker Images
  # ============================================================================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Frontend Image
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Backend Image
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.novasignal.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name novasignal-staging

      - name: Deploy to staging
        run: |
          helm upgrade --install novasignal-staging ./helm/novasignal \
            --namespace staging \
            --create-namespace \
            --set frontend.image.tag=${{ needs.build-images.outputs.frontend-image }} \
            --set backend.image.tag=${{ needs.build-images.outputs.backend-image }} \
            --set environment=staging \
            --set ingress.hostname=staging.novasignal.com \
            --values helm/novasignal/values-staging.yaml \
            --wait --timeout=10m

      - name: Run health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=novasignal-frontend -n staging --timeout=300s
          kubectl wait --for=condition=ready pod -l app=novasignal-backend -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          curl -f https://staging.novasignal.com/health || exit 1
          curl -f https://staging.novasignal.com/api/health || exit 1

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://novasignal.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name novasignal-production

      - name: Backup current deployment
        run: |
          helm get values novasignal-production -n production > backup-values-$(date +%Y%m%d-%H%M%S).yaml

      - name: Deploy to production
        run: |
          helm upgrade --install novasignal-production ./helm/novasignal \
            --namespace production \
            --create-namespace \
            --set frontend.image.tag=${{ needs.build-images.outputs.frontend-image }} \
            --set backend.image.tag=${{ needs.build-images.outputs.backend-image }} \
            --set environment=production \
            --set ingress.hostname=novasignal.com \
            --values helm/novasignal/values-production.yaml \
            --wait --timeout=15m

      - name: Run health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=novasignal-frontend -n production --timeout=600s
          kubectl wait --for=condition=ready pod -l app=novasignal-backend -n production --timeout=600s

      - name: Run production tests
        run: |
          curl -f https://novasignal.com/health || exit 1
          curl -f https://novasignal.com/api/health || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 NovaSignal v${{ github.event.release.tag_name }} deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # Performance Testing
  # ============================================================================
  
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run load testing
        run: |
          npx artillery run tests/load/api-load-test.yml --output staging-load-test.json
          npx artillery report staging-load-test.json

  # ============================================================================
  # Cleanup
  # ============================================================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-frontend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true